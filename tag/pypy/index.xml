<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>pypy on sergem&#39;s personal public notebook</title>
    <link>https://serge-m.github.io/tags/pypy/</link>
    <description>Recent content in pypy on sergem&#39;s personal public notebook</description>
    <image>
      <url>https://serge-m.github.io/papermod-cover.png</url>
      <link>https://serge-m.github.io/papermod-cover.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 16 May 2016 00:11:00 +0000</lastBuildDate><atom:link href="https://serge-m.github.io/tags/pypy/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>pypy with numpy</title>
      <link>https://serge-m.github.io/posts/pypy-with-numpy/</link>
      <pubDate>Mon, 16 May 2016 00:11:00 +0000</pubDate>
      
      <guid>https://serge-m.github.io/posts/pypy-with-numpy/</guid>
      <description>Looks like pypy now can build numpy. Well, a slightly modified numpy.
Get default branch of pypy. be careful cause the developers don&amp;rsquo;t maintain default branch compilable. Revision 84341 (c86b42dd7613) works for me.
compile using
./rpython/bin/rpython -O2 ./pypy/goal/targetpypystandalone.py --withoutmod-micronumpy Create package and vitual environment. Something like this:
./pypy/tool/release/package.py --targetdir ./my_builds/build.tar.bz2 --builddir ./tmp/ --nostrip --archive-name pypy_84341 Needed to copy pypy-c and libpypy to pypy/goal beforehand.
Clone and follow instructions from https://github.com/pypy/numpy/commits/cpyext-ext Revision 3299d0d76fdb831fbcb4429a89c1f53bb36ea07f worked for me</description>
    </item>
    
    <item>
      <title>Scipy in pypy</title>
      <link>https://serge-m.github.io/posts/scipy-in-pypy/</link>
      <pubDate>Tue, 22 Mar 2016 22:12:00 +0000</pubDate>
      
      <guid>https://serge-m.github.io/posts/scipy-in-pypy/</guid>
      <description>Looks like it is too early for using scipy in Pypy. There is a plenty of dependencies on C-code there.
I was able to install scipy 0.17 in pypy. I disabled all failed dependencies. Unfortunately it is completely useless. Almost everything doesn&amp;rsquo;t work.
link</description>
    </item>
    
    <item>
      <title>Building Pypy</title>
      <link>https://serge-m.github.io/posts/building-pypy/</link>
      <pubDate>Tue, 22 Mar 2016 21:51:00 +0000</pubDate>
      
      <guid>https://serge-m.github.io/posts/building-pypy/</guid>
      <description>Pypy builds faster if using -O2 option.
To build faster (according to pypy documentation) use prebuilt pypy from link
Using virtualenv to create virtual environment for it.
Build script (to be placed in pypy source directory):
#!/bin/bash cd pypy/goal || exit 1 source &amp;lt;path to existing pypy environment&amp;gt;/bin/activate || exit 2 pypy ../../rpython/bin/rpython --batch -O2 targetpypystandalone </description>
    </item>
    
    <item>
      <title>TIL about PyPy</title>
      <link>https://serge-m.github.io/posts/til-about-pypy/</link>
      <pubDate>Fri, 08 Jan 2016 08:30:00 +0000</pubDate>
      
      <guid>https://serge-m.github.io/posts/til-about-pypy/</guid>
      <description>Building from source root using command pypy_src$ rpython/bin/rpython -Ojit pypy/goal/targetpypystandalone.py produces structure with obsolete pypy-c and libpypy-c.so in /tmp/usession-release-4.0.1-XXXX/build/pypy-nightly/bin/
Probably pypy compiler places there files integrated in the src distribution. To get fresh versions I had to use pypy-c and libpypy-c.so from sources root.
UPDATE: Probably I was completely wrong. pypy/tool/release/package.py has an option for (not) stripping resulting binary file: &amp;ldquo;&amp;ndash;nostrip&amp;rdquo;. By default it is enabled. Looks like it removed something unused from binaries.</description>
    </item>
    
  </channel>
</rss>
