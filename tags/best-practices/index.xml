<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>best practices on sergem&#39;s personal public notebook</title>
    <link>https://serge-m.github.io/tags/best-practices/</link>
    <description>Recent content in best practices on sergem&#39;s personal public notebook</description>
    <image>
      <url>https://serge-m.github.io/papermod-cover.png</url>
      <link>https://serge-m.github.io/papermod-cover.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 27 Nov 2016 22:47:00 +0000</lastBuildDate><atom:link href="https://serge-m.github.io/tags/best-practices/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Testing json responses in Flask REST apps with pytest</title>
      <link>https://serge-m.github.io/posts/testing-json-responses-in-flask-rest-apps-with-pytest/</link>
      <pubDate>Sun, 27 Nov 2016 22:47:00 +0000</pubDate>
      
      <guid>https://serge-m.github.io/posts/testing-json-responses-in-flask-rest-apps-with-pytest/</guid>
      <description>Testing is an essential part of software developmnet process. Unfortunately best prictives for python are established not as good as for example in Java world. Here I try to explain how to test Flask-based web applications. We want to test endpoints behaviour including status codes and parameters encoding. It means testing of handler functions for those endpoints is not enough.
Tests for endpoints can be considered/used as high-level acceptance tests.</description>
    </item>
    
    <item>
      <title>Python logging best practices</title>
      <link>https://serge-m.github.io/posts/python-logging/</link>
      <pubDate>Tue, 21 Apr 2015 23:05:00 +0000</pubDate>
      
      <guid>https://serge-m.github.io/posts/python-logging/</guid>
      <description>Python has a great built-in logging library. It allows to avoid a lot of boilerplate code and provides great features. Here are some examples. Logging allows to set up a unified formatting for logs:
2023-10-03 12:57:22,377|classifier.py| 62|522130|MainThread|INFO|Classifying messages from ./messages.ndjson (images ./save_path)... 2023-10-03 12:57:22,378|classifier.py| 44|522130|MainThread|INFO|Start reading input messages from ./messages.ndjson 2023-10-03 12:57:22,378|classifier.py| 48|522130|MainThread|INFO|Loaded event {&amp;#39;id&amp;#39;: 104162, &amp;#39;date&amp;#39;: &amp;#39;2023-09-27T07:12:08+00:00&amp;#39;, &amp;#39;entities&amp;#39;: []} 2023-10-03 12:57:22,378|classifier.py| 48|522130|MainThread|INFO|Loaded event {&amp;#39;id&amp;#39;: 58934, &amp;#39;date&amp;#39;: &amp;#39;2023-09-27T07:12:09+00:00&amp;#39;, &amp;#39;entities&amp;#39;: [{&amp;#39;_&amp;#39;: &amp;#39;MessageEntityBold&amp;#39;, &amp;#39;offset&amp;#39;: 92, &amp;#39;length&amp;#39;: 8}]} 2023-10-03 12:57:22,378|classifier.</description>
    </item>
    
  </channel>
</rss>
