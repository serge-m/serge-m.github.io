<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>flask on sergem&#39;s personal public notebook</title>
    <link>https://serge-m.github.io/tags/flask/</link>
    <description>Recent content in flask on sergem&#39;s personal public notebook</description>
    <image>
      <url>https://serge-m.github.io/papermod-cover.png</url>
      <link>https://serge-m.github.io/papermod-cover.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 11 Jan 2018 22:02:00 +0000</lastBuildDate><atom:link href="https://serge-m.github.io/tags/flask/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Flask and SQLAlchemy explained</title>
      <link>https://serge-m.github.io/posts/flask-and-sqlalchemy-explained/</link>
      <pubDate>Thu, 11 Jan 2018 22:02:00 +0000</pubDate>
      
      <guid>https://serge-m.github.io/posts/flask-and-sqlalchemy-explained/</guid>
      <description>Awesome explanation of SQLAlchemy with examples and comparison to Django by Armin Ronacher: SQLAlchemy and You
Flask-SQLAlchemy module Flask-SQLAlchemy is an extension for Flask that adds support for SQLAlchemy to your application.
How to add SQLAlchemy to Flask application:
from flask import Flask from flask_sqlalchemy import SQLAlchemy app = Flask(__name__) # configuration of the DB is read from flask configuration storage app.config[&amp;#39;SQLALCHEMY_DATABASE_URI&amp;#39;] = &amp;#39;sqlite:////tmp/test.db&amp;#39; # here we define db object that keeps track of sql interactions db = SQLAlchemy(app) Now we are ready to define tables and objects using predefined db.</description>
    </item>
    
    <item>
      <title>Sample project with Ember and Flask</title>
      <link>https://serge-m.github.io/posts/sample-ember-and-flask/</link>
      <pubDate>Wed, 25 Oct 2017 23:24:00 +0000</pubDate>
      
      <guid>https://serge-m.github.io/posts/sample-ember-and-flask/</guid>
      <description>I want to use EmberJS with Flask application. Flask will provide an API. Ember frontend will consume and display data from the Flask backend.
Let&amp;rsquo;s say we want our fronted to display a list of users of the system. We will have a main page and users page in our frontend. On the users page the client will see a list of users that we get from backend.
Source code is here: ember_flask_example</description>
    </item>
    
    <item>
      <title>Correct way of running long tasks in Flask</title>
      <link>https://serge-m.github.io/posts/correct-way-of-running-long-tasks-in-flask/</link>
      <pubDate>Mon, 23 Jan 2017 23:11:00 +0000</pubDate>
      
      <guid>https://serge-m.github.io/posts/correct-way-of-running-long-tasks-in-flask/</guid>
      <description>Key to the answer is Celery.
Good post: Using Celery With Flask
Sources
See also: Making an asynchronous task in Flask
Sharing memory and using multiprocessing along with gunicorn seem to be wrong solutions.</description>
    </item>
    
    <item>
      <title>Testing json responses in Flask REST apps with pytest</title>
      <link>https://serge-m.github.io/posts/testing-json-responses-in-flask-rest-apps-with-pytest/</link>
      <pubDate>Sun, 27 Nov 2016 22:47:00 +0000</pubDate>
      
      <guid>https://serge-m.github.io/posts/testing-json-responses-in-flask-rest-apps-with-pytest/</guid>
      <description>Testing is an essential part of software developmnet process. Unfortunately best prictives for python are established not as good as for example in Java world. Here I try to explain how to test Flask-based web applications. We want to test endpoints behaviour including status codes and parameters encoding. It means testing of handler functions for those endpoints is not enough.
Tests for endpoints can be considered/used as high-level acceptance tests.</description>
    </item>
    
    <item>
      <title>Python logging best practices</title>
      <link>https://serge-m.github.io/posts/python-logging/</link>
      <pubDate>Tue, 21 Apr 2015 23:05:00 +0000</pubDate>
      
      <guid>https://serge-m.github.io/posts/python-logging/</guid>
      <description>Python has a great built-in logging library. It allows to avoid a lot of boilerplate code and provides great features. Here are some examples. Logging allows to set up a unified formatting for logs:
2023-10-03 12:57:22,377|classifier.py| 62|522130|MainThread|INFO|Classifying messages from ./messages.ndjson (images ./save_path)... 2023-10-03 12:57:22,378|classifier.py| 44|522130|MainThread|INFO|Start reading input messages from ./messages.ndjson 2023-10-03 12:57:22,378|classifier.py| 48|522130|MainThread|INFO|Loaded event {&amp;#39;id&amp;#39;: 104162, &amp;#39;date&amp;#39;: &amp;#39;2023-09-27T07:12:08+00:00&amp;#39;, &amp;#39;entities&amp;#39;: []} 2023-10-03 12:57:22,378|classifier.py| 48|522130|MainThread|INFO|Loaded event {&amp;#39;id&amp;#39;: 58934, &amp;#39;date&amp;#39;: &amp;#39;2023-09-27T07:12:09+00:00&amp;#39;, &amp;#39;entities&amp;#39;: [{&amp;#39;_&amp;#39;: &amp;#39;MessageEntityBold&amp;#39;, &amp;#39;offset&amp;#39;: 92, &amp;#39;length&amp;#39;: 8}]} 2023-10-03 12:57:22,378|classifier.</description>
    </item>
    
  </channel>
</rss>
