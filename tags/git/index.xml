<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>git on sergem&#39;s personal public notebook</title>
    <link>https://serge-m.github.io/tags/git/</link>
    <description>Recent content in git on sergem&#39;s personal public notebook</description>
    <image>
      <url>https://serge-m.github.io/papermod-cover.png</url>
      <link>https://serge-m.github.io/papermod-cover.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 07 Apr 2020 06:00:00 +0000</lastBuildDate><atom:link href="https://serge-m.github.io/tags/git/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Git cheat sheet</title>
      <link>https://serge-m.github.io/posts/git-cheat-sheet/</link>
      <pubDate>Tue, 07 Apr 2020 06:00:00 +0000</pubDate>
      
      <guid>https://serge-m.github.io/posts/git-cheat-sheet/</guid>
      <description>Nice history log in console git log --all --decorate --oneline --graph  How to remember:
&amp;quot;A Dog&amp;quot; = git log --all --decorate --oneline --graph
Sample result:
$ git log --all --decorate --oneline --graph * e4689e3 (HEAD -&amp;gt; master, origin/master, origin/HEAD) tree iteration * 4c3385d using stoi * 0588a47 gitignore for cpp * 8f3f0e6 removed boost, add readme * f225b06 simple expression interpreter * 1ccdda1 chain of responsibility * f37eb7a restructure of the old code, removed large db file | * 3bfdf78 (tag: 0.</description>
    </item>
    
    <item>
      <title>Pretty git history with branches in command line</title>
      <link>https://serge-m.github.io/posts/pretty-git-history-with-branches-in-command-line/</link>
      <pubDate>Sat, 28 Jan 2017 07:10:00 +0000</pubDate>
      
      <guid>https://serge-m.github.io/posts/pretty-git-history-with-branches-in-command-line/</guid>
      <description>Show git history with branches
git log --graph --abbrev-commit --decorate --format=format:&#39;%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)&#39; --all Less nice and shorter
git log --graph --abbrev-commit --decorate --oneline --all See also:  Git cheat sheet  </description>
    </item>
    
    <item>
      <title>Temporary files format that can be deleted from project of Visual Studio 2010</title>
      <link>https://serge-m.github.io/posts/temporary-files-format-that-can-be/</link>
      <pubDate>Tue, 14 Jan 2014 12:36:00 +0000</pubDate>
      
      <guid>https://serge-m.github.io/posts/temporary-files-format-that-can-be/</guid>
      <description>Add to .gitignore:
 *.ipch Debug Release *.sdf - The SDF file is your code browsing database which uses SQL Sever Compact Edition. You don&amp;rsquo;t need to copy this SDF file while you move your project, and it will be automatically populated in the new location once you open your project.  [[1](http://social.msdn.microsoft.com/Forums/en-US/20fee924-e267-4c1a-b0fe-3321f86e1bb5/sdf-file?forum=vcprerelease&amp;quot; target=&amp;quot;_blank)]
[[2](http://social.msdn.microsoft.com/Forums/vstudio/en-US/1ef46540-e4b8-4779-8403-49239bc3f7ee/is-it-safe-to-delete-ipch-folder-precompiled-headers?forum=vcgeneral&amp;quot; target=&amp;quot;_blank)]</description>
    </item>
    
    <item>
      <title>Migrating from SVN to Git and Mercurial</title>
      <link>https://serge-m.github.io/posts/migrating-from-svn-to-git/</link>
      <pubDate>Wed, 08 Jan 2014 18:14:00 +0000</pubDate>
      
      <guid>https://serge-m.github.io/posts/migrating-from-svn-to-git/</guid>
      <description>There is a lot of answers here: http://stackoverflow.com/questions/79165/how-to-migrate-svn-with-history-to-a-new-git-repository
I found rather useful [this one](http://stackoverflow.com/a/9316931&amp;quot; target=&amp;quot;_blank). A guy made a script according to proposed instructions: https://github.com/onepremise/SGMS
This script will convert projects stored in SVN with the following format:
/trunk /Project1 /Project2 /branches /Project1 /Project2 /tags /Project1 /Project2 This scheme is also popular and supported as well: /Project1 /trunk /branches /tags /Project2 /trunk /branches /tags Each project will get synchronized over by project name:</description>
    </item>
    
  </channel>
</rss>
