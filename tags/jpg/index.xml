<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>jpg on sergem&#39;s personal public notebook</title>
    <link>https://serge-m.github.io/tags/jpg/</link>
    <description>Recent content in jpg on sergem&#39;s personal public notebook</description>
    <image>
      <url>https://serge-m.github.io/papermod-cover.png</url>
      <link>https://serge-m.github.io/papermod-cover.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 16 Feb 2022 21:30:00 +0000</lastBuildDate><atom:link href="https://serge-m.github.io/tags/jpg/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Image processing cheat sheet</title>
      <link>https://serge-m.github.io/posts/image-processing-cheat-sheet/</link>
      <pubDate>Wed, 16 Feb 2022 21:30:00 +0000</pubDate>
      
      <guid>https://serge-m.github.io/posts/image-processing-cheat-sheet/</guid>
      <description>In ImageMagick:
convert save the result to a given (new) file mogrify is the same as convert but it performs processing inplace (the input files are overwritten) Strip metadata from jpg file:
mogrify -strip f.jpg Rotate according the metadata, then strip:
mogrify -auto-orient -strip f.jpg Find jpg and jpeg images, apply orientation from EXIF, remove metadata and resize to 1920 on the longest side preserving the aspect ratio and save to the same files:</description>
    </item>
    
    <item>
      <title>Image and video processing recipes</title>
      <link>https://serge-m.github.io/posts/image-and-video-processing-recipes/</link>
      <pubDate>Fri, 27 Mar 2020 07:18:23 +0000</pubDate>
      
      <guid>https://serge-m.github.io/posts/image-and-video-processing-recipes/</guid>
      <description>I often need to perform some operations on videos or image sequences. Usually I use linux and `ffmpeg`, and sometimes I struggle to remember all the commands. Here is a collection of recipes that I usually use with a bit of explanations. Video conversions ========================== Cut a range of frames --------------------------- Cut a range of frames (100, 130) from a video and save it to mp4 with a good quality using x264 codec: .</description>
    </item>
    
  </channel>
</rss>
