<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>opencv on sergem&#39;s personal public notebook</title>
    <link>https://serge-m.github.io/tags/opencv/</link>
    <description>Recent content in opencv on sergem&#39;s personal public notebook</description>
    <image>
      <url>https://serge-m.github.io/papermod-cover.png</url>
      <link>https://serge-m.github.io/papermod-cover.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 15 Jan 2017 07:10:00 +0000</lastBuildDate><atom:link href="https://serge-m.github.io/tags/opencv/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Image processing in Python</title>
      <link>https://serge-m.github.io/posts/image-processing-in-python/</link>
      <pubDate>Sun, 15 Jan 2017 07:10:00 +0000</pubDate>
      
      <guid>https://serge-m.github.io/posts/image-processing-in-python/</guid>
      <description>Image search using elastic search   Comparison of Image Search Performance using different kinds of vectors
  Plugin for elastic search
  Personalizing image search with feature vectors and Lucene (video)
  Operations on images in python How to set thresholds for Canny edge detector in openCV Zero-parameter, automatic Canny edge detection with Python and OpenCV
1 2 3 4 5 6 7 8 9 10 11  def auto_canny(image, sigma=0.</description>
    </item>
    
    <item>
      <title>То, что вы хотели знать про оптический поток, но стеснялись спросить</title>
      <link>https://serge-m.github.io/posts/blog-post-3/</link>
      <pubDate>Tue, 12 Nov 2013 11:17:00 +0000</pubDate>
      
      <guid>https://serge-m.github.io/posts/blog-post-3/</guid>
      <description>Взято с http://habrahabr.ru/post/201406/
see also Deep Learning в вычислении оптического потока
Объяснение оптического потока из OpenCV для тех, кто не в теме и не очень хочет разобраться.   Обработка изображений*,&amp;nbsp;Алгоритмы*Оптический поток (Optical flow) – технология, использующаяся в различных областях computer vision для определения сдвигов, сегментации, выделения объектов, компрессии видео. Однако если мы захотим его по-быстрому реализовать в своем проекте, прочитав про него на википедии или где-нибудь еще, то, скорее всего, очень быстро наткнемся на то, что он работает очень плохо и сбоит при определении сдвигов уже порядка 1-2 пикселей (по крайней мере так было у меня).</description>
    </item>
    
    <item>
      <title>OpenCV tutorials (Russian)</title>
      <link>https://serge-m.github.io/posts/opencv-tutorials-in-russian/</link>
      <pubDate>Tue, 05 Nov 2013 20:44:00 +0000</pubDate>
      
      <guid>https://serge-m.github.io/posts/opencv-tutorials-in-russian/</guid>
      <description>Делаем детектор движения, или OpenCV — это просто http://habrahabr.ru/company/avi/blog/200804/ 2. OpenCV шаг за шагом http://robocraft.ru/blog/computervision/265.html Пару слов о распознавании образов http://habrahabr.ru/post/208090/  Building opencv program in Cgcc -ggdb `pkg-config --cflags opencv` -o `basename test.c .c` test.c `pkg-config --libs opencv`**Description:**`pkg-config --cflags opencv`&amp;nbsp;— подставляет путь для инклудов через pkgconfig. `pkg-config --libs opencv`&amp;nbsp;— подставляет название либ для линковки через pkgconfig. При установке opencv поместила файлик .pc (в моём случае это /usr/lib/pkgconfig/opencv.pc), в котором рассказывается, где находятся заголовочные файлы этой библиотеки, а где сами либы для линковки.</description>
    </item>
    
    <item>
      <title>OpenCV. Copy image from unsigned char buffer, resize and save to file</title>
      <link>https://serge-m.github.io/posts/opencv-copy-image-from-unsigned-char/</link>
      <pubDate>Tue, 09 Jul 2013 23:23:00 +0000</pubDate>
      
      <guid>https://serge-m.github.io/posts/opencv-copy-image-from-unsigned-char/</guid>
      <description>How to copy image from unsigned char buffer, resize and save to file. If you use single-channel image.
#include &amp;lt;opencv/cv.h&amp;gt; #include &amp;lt;opencv/highgui.h&amp;gt; int coeff = 4; cv::Mat src( height, width, CV_8UC1, (void *) source_byte_beffer ) ); cv::Mat small(height/ coeff, width/ coeff, CV_8UC1 ); cv::Size s_half(width/ coeff, height/ coeff); cv::resize( src, small, s_half, 1, 1, cv::INTER_LINEAR ); // resize from src to small IplImage* writeImage; writeImage=cvCloneImage(&amp;amp;(IplImage)src); cvSaveImage(&amp;#34;src1.bmp&amp;#34;, writeImage); cvReleaseImage( &amp;amp;writeImage ); writeImage=cvCloneImage(&amp;amp;(IplImage)small); cvSaveImage(&amp;#34;little.</description>
    </item>
    
  </channel>
</rss>
