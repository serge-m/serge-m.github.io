<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ros on sergem&#39;s personal public notebook</title>
    <link>https://serge-m.github.io/tags/ros/</link>
    <description>Recent content in ros on sergem&#39;s personal public notebook</description>
    <image>
      <url>https://serge-m.github.io/papermod-cover.png</url>
      <link>https://serge-m.github.io/papermod-cover.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 10 Nov 2020 20:00:00 +0000</lastBuildDate><atom:link href="https://serge-m.github.io/tags/ros/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Point cloud processing</title>
      <link>https://serge-m.github.io/posts/point-cloud-processing/</link>
      <pubDate>Tue, 10 Nov 2020 20:00:00 +0000</pubDate>
      
      <guid>https://serge-m.github.io/posts/point-cloud-processing/</guid>
      <description>ROS nodes Point Cloud IO https://github.com/ANYbotics/point_cloud_io
 two nodes for reading and writing PointCloud2 from/to ply, pcd formats  point_cloud_assembler from laser_assembler http://wiki.ros.org/laser_assembler
This node assembles a stream of sensor_msgs/PointCloud2 messages into larger point clouds. The aggregated point cloud can be accessed via a call to assemble_scans service.
https://github.com/ros-perception/laser_assembler
Tutorial
Octomap http://octomap.github.io/
Seems like a standard solution to convert point clouds to a map in several formats
pointcloud_to_laserscan http://wiki.ros.org/pointcloud_to_laserscan
pcl_ros http://wiki.</description>
    </item>
    
    <item>
      <title>Robocar project</title>
      <link>https://serge-m.github.io/posts/robocar/</link>
      <pubDate>Sat, 24 Aug 2019 20:32:00 +0000</pubDate>
      
      <guid>https://serge-m.github.io/posts/robocar/</guid>
      <description>For the robocar contest in Berlin I started a project of building an autonomous toy car (scale 1:10). The goal of the contest was to show the fastest lap driving autonomously. The track had 8-shape with lane boundaries marked with white tape.
Unfortunately the competition got cancelled. But that gave me an opportunity to switch from my 1st gen car to 2nd gen version.
Here is my first version:
 The second version is built upon a stock RC car Absima Abs1</description>
    </item>
    
    <item>
      <title>ROS experience</title>
      <link>https://serge-m.github.io/posts/ros-experience/</link>
      <pubDate>Sat, 24 Aug 2019 20:32:00 +0000</pubDate>
      
      <guid>https://serge-m.github.io/posts/ros-experience/</guid>
      <description>ROS on raspberry pi There is a compiled image for RPi by ubiquity that has ROS kinetic: https://downloads.ubiquityrobotics.com/pi.html.
It seems for me too old. It&amp;rsquo;s 2020, there are ubuntu 18, ros melodic and ros2, next year the support of python2.7 will be discontinued. Meh&amp;hellip;
It is possible to have ROS melodic on Raspberry Pi 3 B+. See in the next sections.
Installing tensorflow for ROS on raspberry pi Alternatively one can try to install it from wheels: https://www.</description>
    </item>
    
  </channel>
</rss>
